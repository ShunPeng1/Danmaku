//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/ShunCollection/Shun Drag Item System/Shun Drag Item Input Action Asset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Shun_Drag_Item_System
{
    public partial class @ShunDragItemInputActionAsset: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @ShunDragItemInputActionAsset()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Shun Drag Item Input Action Asset"",
    ""maps"": [
        {
            ""name"": ""DragItemControls"",
            ""id"": ""74fce243-01d3-4a91-bbd5-842fcb9d5a00"",
            ""actions"": [
                {
                    ""name"": ""Drag"",
                    ""type"": ""Button"",
                    ""id"": ""ae91a7af-b99d-496f-8aab-fd427f922f1a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScreenPosition"",
                    ""type"": ""Value"",
                    ""id"": ""b3006e8a-5026-45b4-aab3-646bdcc55fa8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3284d808-d256-4b86-8f62-ff461a304fbd"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4fd32c3a-8796-4ba1-a454-a3d433bb8fd6"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // DragItemControls
            m_DragItemControls = asset.FindActionMap("DragItemControls", throwIfNotFound: true);
            m_DragItemControls_Drag = m_DragItemControls.FindAction("Drag", throwIfNotFound: true);
            m_DragItemControls_ScreenPosition = m_DragItemControls.FindAction("ScreenPosition", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // DragItemControls
        private readonly InputActionMap m_DragItemControls;
        private List<IDragItemControlsActions> m_DragItemControlsActionsCallbackInterfaces = new List<IDragItemControlsActions>();
        private readonly InputAction m_DragItemControls_Drag;
        private readonly InputAction m_DragItemControls_ScreenPosition;
        public struct DragItemControlsActions
        {
            private @ShunDragItemInputActionAsset m_Wrapper;
            public DragItemControlsActions(@ShunDragItemInputActionAsset wrapper) { m_Wrapper = wrapper; }
            public InputAction @Drag => m_Wrapper.m_DragItemControls_Drag;
            public InputAction @ScreenPosition => m_Wrapper.m_DragItemControls_ScreenPosition;
            public InputActionMap Get() { return m_Wrapper.m_DragItemControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DragItemControlsActions set) { return set.Get(); }
            public void AddCallbacks(IDragItemControlsActions instance)
            {
                if (instance == null || m_Wrapper.m_DragItemControlsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_DragItemControlsActionsCallbackInterfaces.Add(instance);
                @Drag.started += instance.OnDrag;
                @Drag.performed += instance.OnDrag;
                @Drag.canceled += instance.OnDrag;
                @ScreenPosition.started += instance.OnScreenPosition;
                @ScreenPosition.performed += instance.OnScreenPosition;
                @ScreenPosition.canceled += instance.OnScreenPosition;
            }

            private void UnregisterCallbacks(IDragItemControlsActions instance)
            {
                @Drag.started -= instance.OnDrag;
                @Drag.performed -= instance.OnDrag;
                @Drag.canceled -= instance.OnDrag;
                @ScreenPosition.started -= instance.OnScreenPosition;
                @ScreenPosition.performed -= instance.OnScreenPosition;
                @ScreenPosition.canceled -= instance.OnScreenPosition;
            }

            public void RemoveCallbacks(IDragItemControlsActions instance)
            {
                if (m_Wrapper.m_DragItemControlsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IDragItemControlsActions instance)
            {
                foreach (var item in m_Wrapper.m_DragItemControlsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_DragItemControlsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public DragItemControlsActions @DragItemControls => new DragItemControlsActions(this);
        public interface IDragItemControlsActions
        {
            void OnDrag(InputAction.CallbackContext context);
            void OnScreenPosition(InputAction.CallbackContext context);
        }
    }
}
